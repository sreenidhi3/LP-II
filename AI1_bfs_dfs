
n = int(input()) # no of nodes
graph = {} 

for i in range(n):
    node = input() # inputs node no
    graph[node] = list(map(str, input().rstrip().split())) # inputs connected nodes for that node
visited = []
queue = [] 

def bfs(visited, graph, node): 
  visited.append(node)
  queue.append(node)

  while queue:      
    m = queue.pop(0) 
    print (m, end = " ") 

    for neighbour in graph[m]:
         if neighbour not in visited:
            visited.append(neighbour)
            queue.append(neighbour)


print("\n\n-----Breadth-First Search----")
bfs(visited, graph, '1')

---------------------
**recusrsive**

n = int(input()) # no of nodes
graph = {} 

for i in range(n):
    node = input() # inputs node no
    graph[node] = list(map(str, input().rstrip().split())) # inputs connected nodes for that node
visited = []
queue = [] 

def bfs(visited, graph, node): 
  if node not in visited:
    visited.append(node)
    queue.append(node)
  if( not queue):
    return
  m = queue.pop(0) 
  print (m, end = " ") 

  for neighbour in graph[m]:
    if neighbour not in visited:
      visited.append(neighbour)
      queue.append(neighbour)
  bfs(visited, graph, node)


print("\n\n-----Breadth-First Search----")
bfs(visited, graph, '1')


---------------------------------------------------------------------------

n = int(input()) # no of nodes
graph = {} 

for i in range(n):
    node = input() # inputs node no
    graph[node] = list(map(str, input().rstrip().split())) # inputs connected nodes for that node
    
visited = set() # to not allow duplicates

def dfs(visited, graph, node): 
    if node not in visited:
        print (node, end=" ")
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

print('Entered graph:',graph)
print("\n-----Depth-First Search------")
dfs(visited, graph, '1')


## input 
7
1
3 5 6 7
2
1 2 4 5 6
3

4
1 5 7
5
2 3
6

7
6 5 2 1
